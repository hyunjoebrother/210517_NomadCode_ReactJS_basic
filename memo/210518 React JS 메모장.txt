210518 React JS - 영화 웹 서비스 만들기 start

-> 멍냥 Web & 인하여우비 App project 기릿

## Ch 0. Introduction

Ch0-3 : Why React

- 많이 씀,,,
- 정보, 커뮤가 많음 == 구글링 편하다는 뜻
- 취업취업

## Ch 1. Setup

Ch1-0 : Creating your first React App

- node.js, npm, npx 다운하자
해당 폴더로 가서
$npx create-react-app movie_app (폴더이름)
-> 폴더 생성 완료
-> 생성 폴더로 가서 
$yarn start 아니면 VSC에서 직접 폴더 열기
-> Readme.md 내용 지우고 설명 작성

* pakage.json 안에 명령어가 있음 
-> "scripts"에서 start, build 만 남기고 지우자 (필요없음)

* yarn.lock 파일 삭제 (uarn은 npm)

이제 터미널에서 첫번째 application을 실행하자
$npm start
-> 개발 서버가 실행
-> browser에서도 볼 수 있고 wi-fi 폰 테스트할 때 url 가능


Ch1-1 : Creating a Github Repository

$git init
$git remote add origin 주소
$git add .
$git commit -m " "
$git push origin master


Ch1-2 : How does React work?

폴더 3개임 
public & src만 건들거임

src폴더에 뭔가 많음
하지만 기초 설명을 위해 파일이랑 코드 좀 지울 거임
[index.js]
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />,document.getElementById('root'));

-> App.js랑 index.js 빼고 파일 다 지우자 + 여기도 코드 삭제
[App.js]
import React from "react";

function App() {
  return <div className="App" />;
}

export default App;


이제 서버 동작한 거 보면 아무것도 없음!
-> browser에 자동으로 바로 refresh된다
function App() {
  return <div>Hello, React!</div>
}
하지만 public폴더 index.html에 가면 
<div id = "root"></div> 비어있음
하지만 내 lovalhost에는 내부에 있음?!?!

-> React란,
당신이 거기에 쓰는 모든 요소를 생성하겠다
JS로 element를 넣으면서 그걸 만들고 -> HTML로 밀어넣음
app.js의 Component를 ElementById에 넣으려고 한다
-> React 동작 ON

-> 소스코드 처음부터 HTML 넣지 않아서
apllication이 이것을 실행할 때, 
빈 HTML을 로드하고 -> 그 다음에 React가 HTML을 밀어넣음

* virtual DOM : 소스코드에 존재하지 않음! -> 작업이 빠름
-> react가 만들어낸다


## Ch 2. JSX & Props

Ch2-0 : Creating your first React Component

app.js에 보이는 <App />
-> Component라고 부른다
-> 우리는 직접 보기 좋게 component를 만들고 data를 보여주게 할 거임
component : HTML을 반환하는 함수.
우리는 function, application을 가지고 있고, 이것은 html을 반환할 거임

이렇게 js + html = 'JSX'라고 부름. (React에서 유일한 개념)
js 안의 HTML

## 이제 Component를 만들어보자!!! ##

src폴더 안에 potato.js 새 파일 생성

import React from "react";
-> React는 여기에 jsx가 있는 component 사용하는걸 이해하도록

다음에 Component 이름의 함수 작성
함수로 선언 후에 export하여 Potato를 사용하자
export default Potato

이제 index.js에서 import하자
React application은 '하나'의 component만을 rendering 해야해서
App따로 Potato 따로 해야함
-> index.js 말고 App.js에 Potato를 import 해보자
<h1>Hello, React!</h1>
      <Potato />

완성!!!

-> 소스코드 보면 React는 Component를 가져와서
Browser가 이해할 수 있는 평범한 일반 HTML로 만들었음 굿굿

이제 모든 것들은 App.js application 안에 작업해야함
-> Component를 계속 만들 수 있다!!


Ch2-1 : Reusable Components with JSX + Props

이제 Potato.js 파일 지우고 해보자
App.js에서 Component 따로 작업해보자 -> 작동함

이제 Component에 정보를 보내보자
-> 재사용 가능한 Component를 만들자!
ex) 20개 Potato 출력하고 싶을 때
-> Component에서 Component로,
child component로 정보를 보내보자

App application에서 Food Component로 정보를 보내고
그 다음에 Food component에서
그 정보를 어떻게 사용할 것인지.

<Food name = "kimchi" /> 설정을 하자
HTML에서 class 느낌 ㅇㅇ 이름 속성
이제 우린 kimchi라는 value로 prop 이름을 지정했다
-> name -> favorite 바꿔주자

<Food fav = "kimchi" />
: Food Component에 fav라는 이름의 property를
kimchi라는 value로 줌

-> "React Magic"을 이용해서 props를 사용하자
-> 여기서 React는 우리가 전달한 props를 가져가는 일을 함
ex. something = {true} ~~~~
-> 이렇게 원하는만큼 father Comp.에서 child Comp.로 
많은 props 보낼 수 있다

-> 누가 Food Comp.로 정보를 보내려고 하면
React는 이 모든 속성을 가져올 거임
그리고 Food function Comp.의 argrument 인자로 넣을 거임
function Food(props) {}
-> console.log(props)로 확인해보자
-> Object 안에 Comp.로 전달된 모든 props가 들어있음

이제 JS의 최신 버전 es6의 magic을 사용해보자
function Food({ fav }) { }
나는 Object를 열어서 Object 안에 있는 fav를 꺼낼 거임
-> props object 내부에는 fav가 있음
-> 내부에서 얻도록 한다!
I like {fav} 로 적용하면 I like kimchi 출력!!!

이제 하단 function App()에서 
      <Food fav = "kimchi" />
      <Food fav = "ramen" />
      <Food fav = "kimbob" />
      <Food fav = "Chicken" />
이러면 바로 쉽게 여러개 출력된다.

결론 : 동적 data가 있는 Comp를 통해서
JSX + props를 통해서 모두 재사용 가능하다!



Ch2-2 : Dynamic Component Generation


지금까지는 꽤 귀찮음 ㅇㅇ 직접 하나하나 추가해줘야함
우리가 처음부터 가진 data가 아니기 때문!
이제 웹사이트에 동적 data를 추가해보자
이미 data가 API에서 왔다고 상상해보자

함수를 만들어보자
foodLike라고 불리는 array 생성
-> Food의 object에 대한 배열인데
기본적으로 이 모든 Comp들을 rendering할 거임
하지만 역동적임 ㅠ
이제 object의 list를 가져오고,
function Food Comp.를 동적으로 rendering해보자

이제 이 긴 걸 array로 가져오고 
자동적으로 내가 좋아하는 Food 이름을 함께 rendering하자
그래서 JS function 'map'을 이용하자

* map
: array의 각 item에서 함수를 실행하는 array를 가지는 함수
-> 그 함수의 result를 갖는 array를 너에게 준다. return
map은 function을 취해서 그 함수를 array의 각 item에 적용함

이제 function App에 작업해보자
dish라는 object 선언하자 ㅇㅇ 각각의 items임
=> 와 함께 return된다. 즉 Food Comp.가 반환
우리는 Food 각각의 name이 필요해
dish object 안에는 name, image가 있어서
{dish.name}으로 지정하자.
image도 추가해주자


Ch2-3 : map Recap

앞에서 map으로 한 작업을 renderFood 함수로 선언하자
{foodLike.map(renderFood)}
이제 함수 작업하자 ㅇㅇ 결론적으로 똑같음
이 작업을 하면 기본적으로 여기에 food Comp와 같은 array가 옴
근데 에러뜸
-> list 안에 들어가면 유일하지 않아서!
-> foodLike[]에 id를 지정해주자
-> 모든 element가 다르게 보일 거임

이제 Food Comp.에 key로 promp를 주자
App() 작업
<Food key = {dish.id} ~
이건 Food 함수에 지정한 게 아님 ㅇㅇ 
React 내부에서 사용하기 위함이다!

F12로 코드 확인하면 HTML로 잘 나온다!!
다음에는 우리가 원하는 props를 받고 있는지 체크하는 방법!


Ch2-4 : Protection with PropTypes

props 점검을 하자
rating (평가)를 각 list 내에 추가하자
App()에도 추가해주자 {dish.rating}
그리고 Food()에도
점점 많은 props를 나의 Food object에 전달하기 위해서~

터미널로 prop types 설치하자
$npm i prop-type
: 내가 전달받은 props가 원하는 애인지 확인, 점검해준다
실수 방지 ㅇㅇ
pakage.json에서 잘 설치되었는지 확인 ㄱㄴ "dependencies"

이제 App.js 앞에 import해준다
import PropTypes from "prop-types";
Food Comp에도 추가해주자

Food() 아래에 내가 얻고 싶은 props에 대한 설명 추가하자
이제 우리는 Food.propTypes에 가서 props를 체크할 거임
console 창에서 Error 확인 가능 (ex. string -> number형)
* Required 안 써도 ㄱㅊ
* 구글링하면 점검 방법 check

다음부터 state라는 새로운 개념에 대해서 배워보자


## Ch 3. State

Ch3-0 : Class Components and State

Food 예제 ㅂㅂ
State : 우리가 동적 data와 함께 작업할 때 만들어진다
State는 Dynamoc data를 위한 것. 
(이전 Food 예제는 정적인 data, 직접 하나하나 넣음)
(그리고 아까우니까 Appfood.js 라는 이름으로 바꿔주자)

이번 Ch3 예제는 Appstate.js 에서 작업하자

그동안 함수 만든 것들 'function(class) Comp'라고 부름
class App extends React.Component
-> 클래스 App은 React Component임

우리가 매번 component 만들 때 모든걸 구현 
-> 골라서 구현해보자!
-> extends확장 class를 가지게 된다.

기본적으로 React class Comp에 가져오고
우리는 확장을 시켜보자
원래 class React Comp는 함수가 아니라서 return이 없음
-> 우리가 React Comp에서 확장해서 render method를 가지게 됨

* class Comp vs function Comp
function Comp는 함수라서 뭔가를 return 후 screen에 표시
class Comp는 class임 하지만 react Comp로부터 확장되어
-> return method 가지게 되면서 screen에 표시된다

-> React는 모든 class Comp의 render method를 자동 실행!!!
이제 class Comp에는 state라는 것이 있다.

* state
: object임 Comp의 data를 넣을 공간이 있으며, 이 data는 변함 
이게 바로 너가 state를 사용해야하는 이유 .EU

이제 너가 바꿀 data를 state안에 넣자
그리고 state를 render에 넣고 싶으면 {this.state.count} ㄱㄱ
*** state.count로 안 쓰는 이유가 class라서 this로 함

이제 number 0이라 뜰 거임
하지만 우리는 state에 바꾸고 싶은 data를 넣을 거임
-> 어떻게 App에서 data를 바꿀 것인가???

이제 ADD, MINUS 버튼 2개를 만들 거임
class 내에 js로 각각 함수를 만들자
add = () => {};

원래 JS는 click 기능할 때 addEventListener 어쩌구 해야함
React는 자동으로 onClick만 넣으면 끝
* this.add() : 즉시, this.add : 클릭할 때만
-> 이제 버튼 누르면 console.log 숫자 올라간다!

다음에는 state를 업데이트해보자!!


Ch3-1 : All you need to know about State

'state'를 직접 변경할 수 없음, 동작도 안함 ㅅㄱ
render function은 자동 초기화 x
-> 매번 state의 상태를 변경할 때는
React가 render function을 호출해서 바꿔줘야함

-> setState() 함수를 호출하면 언제 refresh할지 React는 알게 된다
-> add 함수에 this.setState({count:1})
-> state는 object라서 setState는 새로운 state를 받아야 함
근데 그냥 1이랑 -1만 출력됨 ㅅㄱ

이제 다시 바꿔주자 count : this.state.count + 1
-> 이러면 잘 굴러감 ㅇㅇ

* 앞방법은 React가 좋은 애라서 좀 허락해준 거임
current => ({count : current.count + 1})
-> state를 set할 때 외부 상태에 의존하지 않고 '현재' 값 사용함


결론 : setState로 새로운 state와 함께 render function 호출된다


Ch3-2 : Component Life Cycle

render말고 다른 걸 알아보자

* life cycle method
: React가 Comp를 생성하고 없애는 방법

* mounting
: born
Comp가 mount되어 screen에 표시될 때 
- constructor() 먼저 만든다(호출)
- 그 다음에 render()
- 마지막으로 componentDidMount() : 우리한테 알려주는 용

* Updating
: 너가 아는 그거 
state 변결할 때 등등
- render() 후에 componentDidUpdate() 호출

* Unmounting
: Comp가 죽음 
page 바꿀 때 등등
- componentWillUnmount() 호출

다음에는 data를 fetch할 거임


Ch3-3 : Planning the Movie Component

지금까지 Component Life Cycle을 알아봄
이제 우리 실습 Movie Component를 구성해보자
-> App.js 파일 새로 파고 기본 세팅하자

import React from "react";

class App extends React.Component {
    render() {
        return <div></div>;
    }
}

export default App;


먼저 application을 mount하면 생겨나는 것임
-> isLoading : true

* JS 문법 - 삼항 연산자 ternary operator
{isLoading ? "Loading" : "We are ready"}
만약 true면 Loading, true가 아니면 ready 보여줘

이제 this.state로 작동시키자
처음에 우리가 render하면 호출되는 life cycle method는??
-> componentDidMount()
: Comp가 mount 즉시 호출된다
-> setTimeout() : delay function
여기에 this.setState()로 6000ms 후에 변하도록 설정 

* fetch : API를 불러오고 정보를 내보내 주기도 하는 함수
우리가 할 일은 componentDidMount에서 data를 fetch하기
-> API로부터 data fetching 끝나면
"we are ready"대신에 movie를 render하고
map을 만들고 movie를 render한다

이제 state에 movies라는 state 만들고 array 채울 거임

다음 시간에는 React에서 data를 fetching 해보자


## Ch 4. Making the Movie App

Ch4-0 : Fetching Movies from API

fetch하기 위해 axios를 사용하자 ㅇㅇ 
$npm install axios

YTS에서 만든 API를 사용하자
-> List Movies 링크 따오자
https://yts.mx/api/v2/list_movies.json - 토렌트라 링크 계속 바뀜
(이거 쓰자) https://yts-proxy.now.sh/list_movies.json

App.js 상단에 axios를 import하고
import axios from "axios"

componentDidMount에 API 링크 입력
componentDidMount() {
        axios.get("https://yts-proxy.now.sh/list_movies.json");
    }
-> loading 계속 나옴

우리는 axios로부터 온 data를 잡아야한다
왜냐면 axios가 movie 리스트를 줌 
-> data를 잡아서 state에 써먹자 

실행하는데 시간이 걸려서 getMovies 따로 만들고 기다리자
-> async 이 함수는 비동기다. 넌 기다려야함
await : 무엇을 기다려야해요?
-> axios가 실행 다 끝날 때 까지!!

(복습)
application은 render을 함
처음에는 isLoading : true
-> 그래서 Loading을 보자
-> 이제 application이 mount된 후, 우리는 getMovies() 호출할 거임
-> 그리고 getMovies는 axios.get을 사용함
-> 하지만 axios.get은 완료되기까지 시간이 좀 걸려서
-> await를 넣음 -> 이를 위헤 외부에 async 함수가 필요
-> 즉, async await를 하는 것은 우리가 기본적으로
js에게 getMovies 함수에게 조금 시간이 필요하고 기다리라고 하는 겨
-> 우리는 접근 끝날 때까지 기다린다!!

다음에는 movie data를 가져와서 state에 있는 render 함수 보여주자


Ch4-1 : Rendering the Movies











스타필드
멋사 세션 강의 듣고
js하고

멋사하고 + 목욜 자취방팟 약속 시간 정하기

리액트하다가

수욜 11시 쯤에 디자인 회의!











